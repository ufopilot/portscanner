#!/bin/bash

help(){
  echo
  echo " Script: $(basename $0) [OPTIONS]"
  echo
  echo " Usage: $(basename $0) -s srv1,...,srv(n) -p port1,...,port(n) -t timeout"
  echo "        $(basename $0) -s /path/to/file -p port1,...,port(n),port1-port2 -t timeout"
  
  echo 
  echo " Options:"
  echo "  -s <STR,...,STR>      # servers or ips"
  echo "  -p <INT,...,INT-INT>  # single ports or ranges"
  echo "  -o <text|table>       # default table"
  echo "  -t <INT>              # timeout. default 3 seconds"
  echo "  -h                    # display this text"
  echo 
  echo " Examples:"
  echo "  firewallchecker -s vrpiatauv001.pms.bankenit.de -p 80,443"
  echo "  firewallchecker -s vrpiatauv001.pms.bankenit.de,vrpiatauv002.pms.bankenit.de -p 2260,2261 -t 5"
  exit

  #portscanner -s $(echo {n,w}xpiawc{cm,gw,ro,rb}{2,3,4,5,6,7,8,9,k,l,x,y}01.gadeg.de {n,w}xpiawcro{2,3,4,5,6,7,8,9,k,l,x,y}02.gadeg.de|tr ' ' ',') -p 22 -t 1

}

tableTopLine(){
  [ $1 -a $1 = "header" ] && SYMB="─" || SYMB="┬"
  #SYMB1="-"; SYMB2="-"; SYMB3="-"
  #[ "$OUTPUT" = "text" ] && { SYMB1="-"; SYMB2="-"; SYMB3="-"; } 
  printf '┌' 
  printf '─%.0s' {1..40}
  printf $SYMB
  printf '─%.0s' {1..16}
  printf $SYMB
  printf '─%.0s' {1..6}
  printf $SYMB 
  printf '─%.0s' {1..19}
  printf $SYMB
  printf '─%.0s' {1..19}
  printf $SYMB
  printf '─%.0s' {1..7}
  printf $SYMB 
  printf '─%.0s' {1..30}
  printf $SYMB 
  printf '─%.0s' {1..10}
  printf '┐' 
  echo
}

tableRowLine(){
  SYMB="┼"
  printf '├' 
  printf '─%.0s' {1..40}
  printf $SYMB
  printf '─%.0s' {1..16}
  printf $SYMB
  printf '─%.0s' {1..6}
  printf $SYMB
  printf '─%.0s' {1..19}
  printf $SYMB
  printf '─%.0s' {1..19}
  printf $SYMB 
  printf '─%.0s' {1..7}
  printf $SYMB 
  printf '─%.0s' {1..30}
  printf $SYMB 
  printf '─%.0s' {1..10}
  printf '┤' 
  echo
}

tableBottomLine(){
  [ $1 -a $1 = "header" ] && SYMB="─" || SYMB="┴"
  printf '└' 
  printf '─%.0s' {1..40}
  printf $SYMB
  printf '─%.0s' {1..16}
  printf $SYMB
  printf '─%.0s' {1..6}
  printf $SYMB
  printf '─%.0s' {1..19}
  printf $SYMB
  printf '─%.0s' {1..19}
  printf $SYMB
  printf '─%.0s' {1..7}
  printf $SYMB 
  printf '─%.0s' {1..30}
  printf $SYMB 
  printf '─%.0s' {1..10}
  printf '┘' 
  echo
}

tableHeader(){
  printf '│\e[44m%-40s\e[0m│\e[44m%-16s\e[0m│\e[44m%-6s\e[0m│\e[44m%-19s\e[0m│\e[44m%-19s\e[0m│\e[44m%-7s\e[0m│\e[44m%-30s\e[0m│\e[44m%-10s\e[0m│\n' " " " " " " " " " " " " " " " "
  printf '│\e[44m%-40s\e[0m│\e[44m%-16s\e[0m│\e[44m%-6s\e[0m│\e[44m%-19s\e[0m│\e[44m%-19s\e[0m│\e[44m%-7s\e[0m│\e[44m%-30s\e[0m│\e[44m%-10s\e[0m│\n' " $1" " $2" " $3" " $4" " $5" " $6" " $7" " $8"
  printf '│\e[44m%-40s\e[0m│\e[44m%-16s\e[0m│\e[44m%-6s\e[0m│\e[44m%-19s\e[0m│\e[44m%-19s\e[0m│\e[44m%-7s\e[0m│\e[44m%-30s\e[0m│\e[44m%-10s\e[0m│\n' " " " " " " " " " " " " " " " "
}

tableRowContent(){
  printf '\e[1A\e[K│%-40s│%27b│%6s│%-19s│%-19s│%-18b│%-41b│%-21b│\n' "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8"
}

headerContent(){
  printf '│\e[44m %-70s%-83s\e[0m│\n' " " " "
  printf '│\e[44m %-70s%-83s\e[0m│\n' " " "PORT-SCANNER"
  printf '│\e[44m %-70s%-83s\e[0m│\n' " " " "
}

headerTopLine(){
  tableTopLine header
}

headerBottomLine(){
  tableBottomLine header
}


#yellow "\e[1;33mINFO\e[0m"
#blue "\e[1;34mINFO\e[0m"
#green "\e[1;32mINFO\e[0m"
#red "\e[1;31mINFO\e[0m"
#magenta "\e[1;35mINFO\e[0m"


SERVERS=""
PORTS=""
TIMEOUT=3
OUTPUT=table
SYMBOLS="[↳➤☀↺✔✘+⮨←✪✎]"
export LANG=en_US.UTF-8

case $(uname) in 
  CYGWIN*)  __timeOut="timeout -t $TIMEOUT";; 
  *)        __timeOut="timeout $TIMEOUT";;
esac

while getopts s:p:t:o:h opt
do
   case $opt in
       s) 
          [ -f "$OPTARG" ] && SERVERS=$(cat "$OPTARG"|tr ',' ' ') || SERVERS=$(echo $OPTARG|tr ',' ' ');;
       p) __PORTS=$OPTARG
          PORTS=$(echo $__PORTS|tr ',' '\n'|grep -v "-"|tr '\n' ' ')
          RANGES=$(echo $__PORTS|tr ',' '\n'|grep "-")
          for r in $RANGES
          do
              PORTS+=$(seq $(echo $r|tr '-' ' '))
          done
         ;;
       t) TIMEOUT=$OPTARG;;
       o) OUTPUT=$OPTARG
          [ "$OUTPUT" != "table" -a "$OUTPUT" != "text" ] && OUTPUT=table;;
       h) help;;
       ?) help;;
   esac
done

[ -z "$PORTS" -o -z "$SERVERS" ] && help

headerTopLine
headerContent 
headerBottomLine 

tableTopLine
tableHeader "Server" "IP" "Port" "Starttime" "Endtime" "Proc" "Response" "Status"
tableRowLine

SCOUNTER=$(echo $SERVERS|wc -w)
for srv in $SERVERS
do
  printf "\e[1;32m➤ scanning $srv ...\e[0m\n"
  SCOUNTER=$(($SCOUNTER-1))
  PCOUNTER=$(echo $PORTS|wc -w)
  LOOKUP=$($__timeOut host $srv)
  
  if [ -z "${LOOKUP}" ]
  then 
     tableRowContent "$srv" "\e[1;35m-\e[0m" "-" "-" "-" "\e[1;31m-\e[0m" "\e[1;33mserver not found\e[0m" "\e[1;31m-\e[0m"
     tableRowLine
     continue
  fi

  if grep -q "has address" <<<${LOOKUP}
  then 
     NAME=$srv
     IP=$(echo "${LOOKUP}"|awk '{print $NF}')
     IP_STR="\e[1;35m$IP\e[0m"     
  fi
  if grep -q "name pointer" <<<${LOOKUP}
  then 
     IP=$srv
     IP_STR="\e[1;35m$IP\e[0m"     
     NAME=$(echo "${LOOKUP}"|awk '{print $NF}')
  fi

  if grep -q "not found" <<<${LOOKUP}
  then 
     tableRowContent "$srv" "\e[1;35m-\e[0m" "-" "-" "-" "\e[1;31m-\e[0m" "\e[1;33mserver not found\e[0m" "\e[1;31m-\e[0m"
     tableRowLine
     continue
  fi

  for port in $PORTS
  do
    PCOUNTER=$(($PCOUNTER-1))
    STARTTIME=$(date +%Y-%m-%d" "%H:%M:%S)
    NC=$(nc -zv -w $TIMEOUT $IP $port 2>&1|tr '\n' ' ')
    ENDTTIME=$(date +%Y-%m-%d" "%H:%M:%S)
    if grep -q "refused" <<<$NC
    then 
      STATUS="\e[1;32m ✔ open   \e[0m"
      RESPONSE="\e[1;33mconnection refused\e[0m"
      PROC="\e[1;34mdown\e[0m"
    fi

    if grep -q "timed out" <<<$NC
    then 
      STATUS="\e[1;31m ✘ closed \e[0m"
      RESPONSE="\e[1;31mtimed out\e[0m"
      PROC="\e[1;31m-\e[0m"
    fi

    if grep -q "succeeded" <<<$NC
    then 
      STATUS="\e[1;32m ✔ open   \e[0m"
      RESPONSE="\e[1;32mconnection succeeded\e[0m"
      PROC="\e[1;32mup\e[0m"
    fi
    
    tableRowContent "$NAME" "$IP_STR" "$port" "$STARTTIME" "$ENDTTIME" "$PROC" "$RESPONSE" "$STATUS"
    
    if [ $SCOUNTER -eq 0 ]
    then 
      if [ $PCOUNTER -eq 0 ]
      then
        tableBottomLine
      else
        tableRowLine
      fi
    else
        tableRowLine
    fi
  done
done
